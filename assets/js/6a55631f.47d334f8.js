"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[906],{9613:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(9496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),d=r,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return t?a.createElement(k,o(o({ref:n},u),{},{components:t})):a.createElement(k,o({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4504:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(4250),r=(t(9496),t(9613));const i={},o=void 0,s={unversionedId:"zucchini",id:"zucchini",title:"zucchini",description:"Hi there, here is zucchini.",source:"@site/docs/zucchini.md",sourceDirName:".",slug:"/zucchini",permalink:"/website/zucchini",draft:!1,editUrl:"https://github.com/mocktomata/website/blob/main/docs/zucchini.md",tags:[],version:"current",frontMatter:{},sidebar:"mocktomata",previous:{title:"komondor",permalink:"/website/komondor"},next:{title:"incubator",permalink:"/website/incubator"}},p={},l=[{value:"<code>defineStep(clause: string | RegExp, handler: (context, ...args) =&gt; any)</code>",id:"definestepclause-string--regexp-handler-context-args--any",level:2},{value:"<code>defineParameterType({ name, regex, transformer })</code>",id:"defineparametertype-name-regex-transformer-",level:2},{value:"<code>scenario(specName, [options])</code>",id:"scenariospecname-options",level:2}],u={toc:l};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Hi there, here is ",(0,r.kt)("inlineCode",{parentName:"p"},"zucchini"),".\nI'm the mocktomata specialize in BDD."),(0,r.kt)("p",null,"I don't know why my name is ",(0,r.kt)("inlineCode",{parentName:"p"},"zucchini"),".\nI heard that it's because I'm similar to ","[cucumber]",".\nBut I don't really understand what that means."),(0,r.kt)("p",null,"Anyway, I'm a lot more powerful than ","[",(0,r.kt)("inlineCode",{parentName:"p"},"mockto"),"]"," and ","[",(0,r.kt)("inlineCode",{parentName:"p"},"komondor"),"]","."),(0,r.kt)("p",null,"I can help you to write hundreds of thousands of tests with ease."),(0,r.kt)("p",null,"I provide two functions: ",(0,r.kt)("inlineCode",{parentName:"p"},"defineStep()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"scenario()"),"."),(0,r.kt)("p",null,"Anyway, here is how I do the same test (remember, I can do a lot more):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import axios from 'axios'\nimport { scenario } from 'mocktomata'\n\ntest('get friends', async () => {\n  const { spec, done } = scenario('get friends')\n  const s = await spec(axios)\n\n  const friends = await getFriends(s, 'miku')\n  expect(friends.map(f => f.name)).toEqual(['luka', 'rumi', 'len', 'ren'])\n\n  await done()\n})\n\nafterAll(() => scenario.cleanup())\n")),(0,r.kt)("p",null,"While that makes me looks like ","[",(0,r.kt)("inlineCode",{parentName:"p"},"komondor"),"]",",\nbut people with sharp eye as you probably notice that this test doesn't use the ",(0,r.kt)("inlineCode",{parentName:"p"},"defineStep()")," function."),(0,r.kt)("p",null,"And that's a huge miss-out!"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"defineStep()")," can define reuseable steps with the same behavior simulation,\nand you can use them in ",(0,r.kt)("inlineCode",{parentName:"p"},"scenario()")," in multiple ways."),(0,r.kt)("p",null,"Here is a much better version of the same test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import axios from 'axios'\nimport { defineStep, scenario } from 'mocktomata'\n\ndefineStep('get friends of {word}', ({ spec }, name) => {\n  const s = await spec(axios)\n  return await getFriends(s, name)\n})\n\ndefineStep('clear friends of {word}', ...)\ndefineStep('add {word} as a friend of {word}', ...)\n\ntest('get friends', async () => {\n  const { ensure, setup, run, teardown, done } = scenario('get friends')\n  await ensure('clear friends of miku')\n\n  await setup('add luka as a friend of miku')\n  await setup('add ren as a friend of miku')\n\n  const friends = await run('get friends of miku')\n  expect(friends.map(f => f.name)).toEqual(['luka', 'ren'])\n\n  await teardown('clear friends of miku')\n\n  await done()\n})\n\nafterAll(() => scenario.cleanup())\n")),(0,r.kt)("p",null,"If you understand how powerful I am,\nI would like to be your friend!"),(0,r.kt)("p",null,"Here is my detail API:"),(0,r.kt)("h2",{id:"definestepclause-string--regexp-handler-context-args--any"},(0,r.kt)("inlineCode",{parentName:"h2"},"defineStep(clause: string | RegExp, handler: (context, ...args) => any)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"clause")," can be a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"RegExp"),".\nWhen it is a string, you can use most of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cucumber/cucumber-expressions"},"Cucumber Expression")," parameter."),(0,r.kt)("p",null,"You can also define your own parameter using ","[",(0,r.kt)("inlineCode",{parentName:"p"},"defineParameterType"),"]","."),(0,r.kt)("p",null,"Inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"handler"),", you get the ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"args"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," contains 5 properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"defineStep('some step', ({ clause, mode, runSubStep, spec, maskValue }) => { ... })\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"clause")," in the input clause in string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { run } = scenario('some scenario')\nrun('some clause') // <-- this\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mode")," is the current ",(0,r.kt)("inlineCode",{parentName:"p"},"SpecMode"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"runSubStep")," allows you to run another step just like the ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"scenario"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spec")," is the same spec function that you should fall in love by now."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"maskValue")," is the same ",(0,r.kt)("inlineCode",{parentName:"p"},"maskValue()")," provided by ",(0,r.kt)("a",{parentName:"p",href:"/website/spec"},(0,r.kt)("inlineCode",{parentName:"a"},"Spec"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," is also very interesting.\nIf your ",(0,r.kt)("inlineCode",{parentName:"p"},"clause")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"RegExp")," and it contains capture group, the value will be in the ",(0,r.kt)("inlineCode",{parentName:"p"},"args"),".\nThe same if the ",(0,r.kt)("inlineCode",{parentName:"p"},"clause")," is a string and you specify some parameter in it."),(0,r.kt)("p",null,'What\'s interesting is that it also pass in some "secret" arguments.\nIf you run a step with additional arguments, they are passed to ',(0,r.kt)("inlineCode",{parentName:"p"},"args"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { run } = scenario('some scenario')\nrun('do something secretive', 1, 2, 3)\n")),(0,r.kt)("p",null,"If you have both expression params (or capture groups) and these additional arguments,\nthe additional arguments will come after the expression params/capture groups:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"defineStep('set SSN for {word}', (_, name, ssn) => { ... })\n")),(0,r.kt)("h2",{id:"defineparametertype-name-regex-transformer-"},(0,r.kt)("inlineCode",{parentName:"h2"},"defineParameterType({ name, regex, transformer })")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"defineParameterType")," is the way you can define addition parameter type to be used in ",(0,r.kt)("inlineCode",{parentName:"p"},"defineStep"),"."),(0,r.kt)("p",null,"For more details, you can take a look at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cucumber/cucumber-expressions#custom-parameter-types"},"cucumber parameter type")),(0,r.kt)("h2",{id:"scenariospecname-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"scenario(specName, [options])")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"specName")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," is nothing special.\nThey are the same as the one for ","[",(0,r.kt)("inlineCode",{parentName:"p"},"mockto"),"]"," and ","[",(0,r.kt)("inlineCode",{parentName:"p"},"komondor"),"]","."),(0,r.kt)("p",null,"What's interesting is the return value."),(0,r.kt)("p",null,"I returns the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ensure"),": this runs a step to ensure the test environment is clean"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setup"),": this runs a step to setup the test environment (the ",(0,r.kt)("inlineCode",{parentName:"li"},"given")," step)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run"),": this runs a step as the test"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"teardown"),": this runs a step to clean up the test environment")),(0,r.kt)("p",null,"I also returns ",(0,r.kt)("inlineCode",{parentName:"p"},"spec"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"done"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ignoreMismatch"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"maskValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mode"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"reporter"),".\nThey are the same as others, I won't talk about them here."))}m.isMDXComponent=!0}}]);