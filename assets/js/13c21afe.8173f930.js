"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[673],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,k=m["".concat(p,".").concat(d)]||m[d]||s[d]||i;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(4250),o=(n(9496),n(9613));const i={hide_title:!0},r=void 0,l={unversionedId:"plugin",id:"plugin",title:"plugin",description:"Plugin",source:"@site/docs/plugin.md",sourceDirName:".",slug:"/plugin",permalink:"/website/plugin",draft:!1,editUrl:"https://github.com/mocktomata/website/blob/main/docs/plugin.md",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"mocktomata",previous:{title:"configuration",permalink:"/website/configuration"}},p={},u=[{value:"Plugin",id:"plugin",level:2},{value:"Package, Module, and Plugins",id:"package-module-and-plugins",level:2},{value:"<code>PluginModule</code>",id:"pluginmodule",level:2},{value:"<code>activate()</code>",id:"activate",level:2},{value:"<code>SpecPlugin</code>",id:"specplugin",level:2},{value:"Example: <code>objectPlugin</code>",id:"example-objectplugin",level:2}],c={toc:u};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"plugin"},"Plugin"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mocktomata/mocktomata"},"mocktomata")," tries to handle most use cases out of the box."),(0,o.kt)("p",null,"But there could be cases that the code you use has certain semantics that ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mocktomata/mocktomata"},"mocktomata")," could not handle."),(0,o.kt)("p",null,"In those cases, you can either create an adapter,\nor write a plugin to handle those cases."),(0,o.kt)("p",null,"Inside ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mocktomata/mocktomata"},"mocktomata"),", all JavaScript syntax are handled by internal plugins."),(0,o.kt)("h2",{id:"package-module-and-plugins"},"Package, Module, and Plugins"),(0,o.kt)("p",null,'The word "plugin" typically refers to a plugin package (e.g. a ',(0,o.kt)("inlineCode",{parentName:"p"},"eslint-plugin-harmony")," is a plugin package),\nand the plugin itself.\nTo make sure we are clear about what are we referring to, consider this:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A plugin package exports a plugin module which register one or more plugins.")),(0,o.kt)("p",null,"For example,\nyou need to write a plugin for ",(0,o.kt)("inlineCode",{parentName:"p"},"node-fetch")," (you don't have to, but we use it as an example)."),(0,o.kt)("p",null,"You will create package like ",(0,o.kt)("inlineCode",{parentName:"p"},"mocktomata-plugin-node-fetch"),",\nwhich expose a ",(0,o.kt)("a",{parentName:"p",href:"#pluginmodule"},(0,o.kt)("inlineCode",{parentName:"a"},"PluginModule")),",\nwhich register a ",(0,o.kt)("inlineCode",{parentName:"p"},"node-fetch")," plugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// `mocktomata-plugin-node-fetch/ts/index.ts`\nimport nodeFetchPlugin from './nodeFetchPlugin'\n\nexport default {\n  activate(context) {\n    context.register(nodeFetchPlugin)\n  }\n}\n")),(0,o.kt)("p",null,"And you use it by adding it to your ",(0,o.kt)("a",{parentName:"p",href:"/website/configuration"},"configuration"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'// mocktomata.json\n{\n  "plugins": ["mocktomata-plugin-node-fetch"]\n}\n')),(0,o.kt)("p",null,"To make your plugin more discoverable, you can add the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"mocktomata-plugin")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'// package.json\n{\n  "keywords": [\n    "mocktomata-plugin"\n  ]\n}\n')),(0,o.kt)("h2",{id:"pluginmodule"},(0,o.kt)("inlineCode",{parentName:"h2"},"PluginModule")),(0,o.kt)("p",null,"Your plugin should expose a ",(0,o.kt)("a",{parentName:"p",href:"#pluginmodule"},(0,o.kt)("inlineCode",{parentName:"a"},"PluginModule"))," as its default export."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"#pluginmodule"},(0,o.kt)("inlineCode",{parentName:"a"},"PluginModule"))," contains a single method: ",(0,o.kt)("a",{parentName:"p",href:"#activate"},(0,o.kt)("inlineCode",{parentName:"a"},"activate()")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Mocktomata } from 'mocktomata'\n\nexport default {\n  activate(context: Mocktomata.ActivationContext): void { }\n}\n")),(0,o.kt)("h2",{id:"activate"},(0,o.kt)("inlineCode",{parentName:"h2"},"activate()")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"#activate"},(0,o.kt)("inlineCode",{parentName:"a"},"activate()"))," method will be called when the plugin is loaded."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Mocktomata.ActivationContext")," it receives contain a ",(0,o.kt)("inlineCode",{parentName:"p"},"register()")," function,\nwhich you can use to register one or more ",(0,o.kt)("a",{parentName:"p",href:"#specplugin"},(0,o.kt)("inlineCode",{parentName:"a"},"SpecPlugin")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Mocktomata, SpecPlugin } from 'mocktomata'\nimport { pluginA, pluginB } from './plugins'\n\nexport default {\n  activate({ register }: Mocktomata.ActivationContext) {\n    register(pluginA)\n    register(pluginB)\n  }\n}\n")),(0,o.kt)("h2",{id:"specplugin"},(0,o.kt)("inlineCode",{parentName:"h2"},"SpecPlugin")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"#specplugin"},(0,o.kt)("inlineCode",{parentName:"a"},"SpecPlugin"))," is the type of a plugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export type SpecPlugin<S = any, M = any> = {\n  /**\n   * Name of the plugin. This is needed only if there are multiple plugins in a package.\n   */\n  name?: string,\n  /**\n   * Indicates if the plugin can handle the specified subject.\n   */\n  support(subject: unknown): boolean,\n  /**\n   * Creates a spy that captures the interactions with the specified subject.\n   * @param context Provides tools needed to record the subject's behavior.\n   * @param subject The subject to spy.\n   */\n  createSpy(context: SpecPlugin.SpyContext<M>, subject: S): S,\n  /**\n   * Creates a stub in place of the specified subject.\n   * @param context Provides tools needed to reproduce the subject's behavior.\n   * @param meta Meta data of the subject.\n   * This is created in `createSpy() -> record.declare()` and is used to make the stub looks like the subject.\n   */\n  createStub(context: SpecPlugin.StubContext, subject: S, meta: M): S,\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property is optional, if your plugin package only has one plugin.\nIn that case, the package name will be used as the name of the plugin."),(0,o.kt)("p",null,"If you have more than one plugins in your plugin package,\nspecify the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and each plugin will be named as ",(0,o.kt)("inlineCode",{parentName:"p"},"packageName/name"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"support()")," function is where you tell ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mocktomata/mocktomata"},"mocktomata")," that your plugin can handle the specific ",(0,o.kt)("a",{parentName:"p",href:"/website/spec#what-can-be-a-spec-subject"},"spec subject"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createSpy()")," should return a spy that captures the behavior."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SpecPlugin.SpyContext")," contains a few functions for you to capture various behaviors."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"createStub()")," should return a stub that simulate the behavior."),(0,o.kt)("p",null,"Like ",(0,o.kt)("inlineCode",{parentName:"p"},"SpecPlugin.SpyContext"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"SpecPlugin.StubContext")," contains a few functions for you to simulate various behaviors."),(0,o.kt)("h2",{id:"example-objectplugin"},"Example: ",(0,o.kt)("inlineCode",{parentName:"h2"},"objectPlugin")),(0,o.kt)("p",null,"Now, let's take a look at the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"objectPlugin")," to understand how it works:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const objectPlugin: SpecPlugin<Record<string | number, any>, string> = {\n  name: 'object',\n  support: subject => subject !== null && typeof subject === 'object',\n  createSpy: ({ getProperty, setProperty, setMeta }, subject) => {\n    setMeta(metarize(subject))\n    return new Proxy(subject, {\n      get(_: any, key: string) {\n        return hasProperty(subject, key)\n          ? getProperty({ key }, () => subject[key])\n          : undefined\n      },\n      set(_, key: string, value: any) {\n        return setProperty({ key, value }, value => subject[key] = value)\n      }\n    })\n  },\n  createStub: ({ getProperty, setProperty }, _, meta) => {\n    return new Proxy(demetarize(meta), {\n      get(_: any, key: string) {\n        return getProperty({ key })\n      },\n      set(_, key: string, value: any) {\n        return setProperty({ key, value })\n      }\n    })\n  }\n}\n")),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"objectPlugin"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," is needed because it is an internal plugin.\nYou can ignore that."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"support()")," shows that it work with ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," type except ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"createSpy()"),", it set the metadata of the ",(0,o.kt)("inlineCode",{parentName:"p"},"subject")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"setMeta()"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"metarize()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"demetarize()")," are just some internal serialization function.\nYou can set the metadata to whatever you want,\nas long as it is JSON compatible."),(0,o.kt)("p",null,"Then it returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Proxy")," and handles the ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"set()")," requests.\nIt returns ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if the ",(0,o.kt)("inlineCode",{parentName:"p"},"subject")," does not have that property,\nso that it won't record some noise not related to the ",(0,o.kt)("inlineCode",{parentName:"p"},"subject"),"."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"createStub()"),", it recreate the base of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Proxy")," by deserializing the metadata,\nand replay the ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"set()")," calls as they happens."),(0,o.kt)("p",null,"So you can see that it is not very complicated to write a plugin."),(0,o.kt)("p",null,"Of course, there are cases it will be more complicated than ",(0,o.kt)("inlineCode",{parentName:"p"},"objectPlugin"),",\nsay for example you need to deal with some asynchronous calls as in ",(0,o.kt)("inlineCode",{parentName:"p"},"promisePlugin"),"."),(0,o.kt)("p",null,"If you have any questions, feel free to ask in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mocktomata/mocktomata/discussions"},"discussions")))}s.isMDXComponent=!0}}]);